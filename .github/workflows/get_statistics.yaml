name: get_statistics

on:
  workflow_dispatch:

jobs:
  get_statistics:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        server: [1, 2, 3, 4]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set common secrets
        run: |
          echo "SERVER_HOSTNAME=${{ secrets.SERVER_HOSTNAME }}" >> $GITHUB_ENV
          echo "SERVER_PASSWORD=${{ secrets.SERVER_PASSWORD }}" >> $GITHUB_ENV
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> $GITHUB_ENV

      - name: Set server-specific username
        run: |
          case "${{ matrix.server }}" in
            1)
             echo "USERNAME=${{ vars.USERNAME_1 }}" >> $GITHUB_ENV
            ;;
           2)
             echo "USERNAME=${{ vars.USERNAME_2 }}" >> $GITHUB_ENV
           ;;
          3)
             echo "USERNAME=${{ vars.USERNAME_3 }}" >> $GITHUB_ENV
           ;;
          4)
             echo "USERNAME=${{ vars.USERNAME_4 }}" >> $GITHUB_ENV
           ;;
          esac

      - name: Install sshpass
        run: sudo apt-get install -y sshpass || echo "sshpass already installed"

      - name: SSH into server and run script
        run: |

          sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -T ${{ env.USERNAME }}@${{ env.SERVER_HOSTNAME }} -o ConnectTimeout=10 2>/tmp/ssh_error.log || {
            echo -e "❌ SSH连接失败"
            cat /tmp/ssh_error.log
            exit 1
          }

          sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -T ${{ env.USERNAME }}@${{ env.SERVER_HOSTNAME }} 2>/dev/null << EOF
            set -e 
            curl -Ls https://raw.githubusercontent.com/Meokj/MyServ00/main/hy2/get_statistics.sh -o get_statistics.sh || { echo "❌ 脚本下载失败"; exit 1; }
            bash get_statistics.sh "${{ env.PASSWORD }}" || { echo "❌ 脚本执行失败"; exit 1; }
            echo -e "✅ 脚本执行成功"
          EOF
          echo "log_file=$(cat $LOG_FILE)" >> $GITHUB_ENV  

  aggregate_logs:
    runs-on: ubuntu-latest
    needs: get_statistics
    steps:
      - name: Aggregate logs
        run: |
          echo "Aggregated Logs:"
          for i in 1 2 3 4; do
            if [ -f "get_statistics_\${i}.log" ]; then
              echo "Logs from server \$i:"
              cat "get_statistics_\${i}.log"
            else
              echo "No logs found for server \$i"
            fi
          done
