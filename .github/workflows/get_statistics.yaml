name: get_statistics

on:
  workflow_dispatch:

jobs:
  get_statistics:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        server: [1, 2, 3, 4]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set common secrets
        run: |
          echo "SERVER_HOSTNAME=${{ secrets.SERVER_HOSTNAME }}" >> $GITHUB_ENV
          echo "SERVER_PASSWORD=${{ secrets.SERVER_PASSWORD }}" >> $GITHUB_ENV
          echo "PASSWORD=${{ secrets.PASSWORD }}" >> $GITHUB_ENV

      - name: Set server-specific username
        run: |
          case "${{ matrix.server }}" in
            1)
             echo "USERNAME=${{ vars.USERNAME_1 }}" >> $GITHUB_ENV
            ;;
           2)
             echo "USERNAME=${{ vars.USERNAME_2 }}" >> $GITHUB_ENV
           ;;
          3)
             echo "USERNAME=${{ vars.USERNAME_3 }}" >> $GITHUB_ENV
           ;;
          4)
             echo "USERNAME=${{ vars.USERNAME_4 }}" >> $GITHUB_ENV
           ;;
          esac

      - name: Install sshpass
        run: sudo apt-get install -y sshpass || echo "sshpass already installed"

      - name: SSH into server and run script
        run: |
          LOG_FILE="get_statistics_${{ matrix.server }}.log"
          {
            sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -T ${{ env.USERNAME }}@${{ env.SERVER_HOSTNAME }} -o ConnectTimeout=10 2>/tmp/ssh_error.log || {
              echo -e "❌ SSH连接失败"
              cat /tmp/ssh_error.log
              exit 1
            }

            sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -T ${{ env.USERNAME }}@${{ env.SERVER_HOSTNAME }} 2>/dev/null << EOF
              set -e 
              curl -Ls https://raw.githubusercontent.com/Meokj/MyServ00/main/hy2/get_statistics.sh -o get_statistics.sh || { echo "❌ 脚本下载失败"; exit 1; }
              bash get_statistics.sh "${{ env.PASSWORD }}" || { echo "❌ 脚本执行失败"; exit 1; }
              echo -e "✅ 脚本执行成功"
            EOF
          } &> "$LOG_FILE"
          echo "log_file_${{ matrix.server }}=$LOG_FILE" >> $GITHUB_ENV

      - name: Upload log artifact
        uses: actions/upload-artifact@v4
        with:
          name: log-${{ matrix.server }}
          path: get_statistics_${{ matrix.server }}.log
          
  aggregate_logs:
    runs-on: ubuntu-latest
    needs: get_statistics

    steps:
      # 下载所有 get_statistics job 上传的 log artifacts
      - name: Download all log artifacts
        uses: actions/download-artifact@v4
        with:
          path: logs

      # 遍历 logs 目录，输出每个服务器对应的日志内容
      - name: Aggregate logs
        run: |
          echo "📦 Aggregated Logs from All Servers:"
          for i in 1 2 3 4; do
            log_file="logs/log-${i}/get_statistics_${i}.log"
            echo "------ Server $i ------"
            if [ -f "$log_file" ]; then
              cat "$log_file"
            else
              echo "⚠️ No log found for server $i"
            fi
            echo ""
          done
