name: keep_serv00

on:
  workflow_dispatch:  # 支持手动执行  

jobs:
  keep_serv00:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        server: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set server variables
        id: set_vars
        run: |
          if [ "${{ matrix.server }}" == "1" ]; then
            echo "SERVER_USERNAME=coffeebabysoster" >> $GITHUB_ENV
            echo "SERVER_HOSTNAME=${{ secrets.SERVER1_HOSTNAME }}" >> $GITHUB_ENV
            echo "SERVER_PASSWORD=${{ secrets.SERVER1_PASSWORD }}" >> $GITHUB_ENV
            echo "UUID=${{ secrets.SERVER1_UUID }}" >> $GITHUB_ENV
            echo "UDPPORT=15370" >> $GITHUB_ENV
          elif [ "${{ matrix.server }}" == "2" ]; then
            echo "SERVER_USERNAME=coffeebabyheart" >> $GITHUB_ENV
            echo "SERVER_HOSTNAME=${{ secrets.SERVER8_HOSTNAME }}" >> $GITHUB_ENV
            echo "SERVER_PASSWORD=${{ secrets.SERVER8_PASSWORD }}" >> $GITHUB_ENV
            echo "UUID=${{ secrets.SERVER8_UUID }}" >> $GITHUB_ENV
            echo "UDPPORT=40428" >> $GITHUB_ENV
          elif [ "${{ matrix.server }}" == "9" ]; then
            echo "SERVER_USERNAME=coffeebabyworker" >> $GITHUB_ENV
            echo "SERVER_HOSTNAME=${{ secrets.SERVER9_HOSTNAME }}" >> $GITHUB_ENV
            echo "SERVER_PASSWORD=${{ secrets.SERVER9_PASSWORD }}" >> $GITHUB_ENV
            echo "UUID=${{ secrets.SERVER9_UUID }}" >> $GITHUB_ENV
            echo "UDPPORT=57019" >> $GITHUB_ENV
          elif [ "${{ matrix.server }}" == "10" ]; then
            echo "SERVER_USERNAME=coffeebabybaby" >> $GITHUB_ENV
            echo "SERVER_HOSTNAME=${{ secrets.SERVER10_HOSTNAME }}" >> $GITHUB_ENV
            echo "SERVER_PASSWORD=${{ secrets.SERVER10_PASSWORD }}" >> $GITHUB_ENV
            echo "UUID=${{ secrets.SERVER10_UUID }}" >> $GITHUB_ENV
            echo "UDPPORT=32938" >> $GITHUB_ENV
          fi
            
      - name: Install sshpass
        run: sudo apt-get install -y sshpass || echo "sshpass already installed"

      - name: SSH into server and run script
        run: |
          sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -T ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOSTNAME }} -o ConnectTimeout=10 2>/tmp/ssh_error.log || {
            echo -e "\033[31mSSH connection failed! Please check your SSH credentials or server status.\033[0m"
            echo -e "\033[31mError details:\033[0m"
            cat /tmp/ssh_error.log
            exit 1
           }
           
          sshpass -p "${{ env.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no -T ${{ env.SERVER_USERNAME }}@${{ env.SERVER_HOSTNAME }} 2>/dev/null << EOF
            set -e 
            curl -Ls https://raw.githubusercontent.com/co2f2e/Serv00/main/bash/keep_serv00.sh -o keep_serv00.sh || { echo 'Script download failed'; exit 1; }
            bash keep_serv00.sh "${{ env.UDPPORT }}" "${{ env.UUID }}" || { echo 'Script execution failed'; exit 1; }
            if [ $? -eq 0 ]; then
              echo
              echo -e "\033[32mSuccess\033[0m"
              echo
            else
              echo
              echo -e "\033[31mFailure\033[0m"
              echo
              exit 1
            fi
          EOF
